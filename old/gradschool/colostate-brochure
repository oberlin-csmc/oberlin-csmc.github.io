From gradinfo@debussy.CS.ColoState.EDU Wed Nov  2 16:33:41 1994
Status: RO
X-VM-v5-Data: ([nil nil nil nil nil nil nil nil nil]
	["71369" "Wed" "2" "November" "1994" "14:33:17" "-0700" "cs graduate information" "gradinfo@cs.colostate.edu " nil "1430" "Re: Gradschool Application & Information" "^From:" nil nil "11"])
Received: from yuma.ACNS.ColoState.EDU (yuma.ACNS.ColoState.EDU [129.82.100.64]) by cs.oberlin.edu (8.6.4/8.6.4) with SMTP id QAA09561 for <jmankoff@cs.oberlin.edu>; Wed, 2 Nov 1994 16:33:33 -0500
Received: from debussy.cs.colostate.edu by yuma.ACNS.ColoState.EDU (AIX 3.2/UCB 5.64/4.03)
          id AA64720; Wed, 2 Nov 1994 14:33:29 -0700
Received: by debussy.CS.ColoState.EDU (5.57/Ultrix3.0-C)
	id AA21287; Wed, 2 Nov 94 14:33:19 -0700
Message-Id: <9411022133.AA21287@debussy.CS.ColoState.EDU>
In-Reply-To: <199411021714.MAA21827@cs.oberlin.edu> from "Jen Mankoff" at Nov 2, 94 12:14:24 pm
X-Mailer: ELM [version 2.4 PL22]
Content-Type: text
Content-Length: 71369     
From: gradinfo@cs.colostate.edu (cs graduate information)
To: jmankoff (Jen Mankoff)
Subject: Re: Gradschool Application & Information
Date: Wed, 2 Nov 1994 14:33:17 -0700 (MST)


Application forms (if requested) will be mailed to you.

A recommendation form is included at the end of this message; please
follow the instructions for cutting it to fit each page, and print off
three copies.  While we do not require this form for recommendation
letters, we do prefer it.

===============================================================================

						      Revised September 1994  


			     Colorado State University
			    Computer Science Department
				  Graduate Programs  


Thank you for your interest in the Computer Science Department at
Colorado State University.  Enclosed please find information regarding
this Department.

In brief summary, consideration for graduate admission to the
University requires: an Official Graduate Record Examination Score
Report for both the General Test and the Subject Test in Computer
Science; official transcripts; proof of University degree(s); a
statement of personal interest; and three (3) letters of
recommendation.  If you are an international student this department
requires a minimum TOEFL score of 580, with official proof of such
score.

Financial assistance is awarded on a competitive and limited basis,
and decisions are made approximately six (6) months before the
effective semester.  We have no way of knowing if any individual
applicant will get assistance until the entire applicant pool is
reviewed.  If you would like to be considered for assistance indicate
this on your application.  Because Colorado State University is funded
by the State of Colorado and the United States Federal Government, it
is the policy of this department to give preference to U.S. citizens
when awarding financial assistance, all other factors being equal.

Your completed application form, the US$30.00 nonrefundable
application fee, and all other application materials should be sent
to:

			Colorado State University  
			Office of Graduate Admissions 
			Fort Collins, CO  80523  

Please note that the Department and/or individual faculty members will
not review any credentials until a formal application has been
received and the file is complete.

If you have further questions, please feel free to contact the Office
of Admissions at 303 491 6909, or this department at 303 491 5792.


GENERAL INFORMATION 

Cost of Study: In 1994-95, full-time graduate tuition is $1,223 for
Colorado residents and $4,388 for non-residents, per semester.  Fees
are $292.27 per	semester.  

Cost of Living: On-campus apartments for single students rent for $258
to $450 per month.  Family housing ranges from $443 to $650 per month.
Off-campus, rent for a two bedroom apartment averages $550 monthly.  

Student Group: The University enrolled about 21,000 regular, on-campus
students in 1993-94, including 3,638 graduate students.  Among about
65 Computer Science graduate students, 30% are noncitizens.  More than
50% receive financial aid from the department and more than 20% work
in the computer industry while pursuing graduate work.  

Location: Fort Collins is a community of 95,000 located along the
foothills of the Rocky Mountains,  60 miles north of  Denver.   The
climate is moderate -  15 inches of   precipitation   and 290   days
of sunshine   annually.  Cultural offerings include a museum, library,
symphony, chorale, and community center,	all  with many
activities and performances.  The spectrum  of cultural  and outdoor
activities,  climate,  and  mountain  setting  contribute  to  make
Fort Collins a livable community.   

The University:  Colorado State was designated Colorado's land-grant
college in 1879; it was named Colorado State University in 1957.
Today the University has 8 colleges,  56 departments,  and over 100
academic programs.   The  central, 666-acre,  campus   includes
nearly   100 academic   buildings,  research facilities,
dormitories,  married   students' housing, and the Veterinary Teaching
Hospital.   Other campuses  support  instruction and  research in
agriculture, engineering, forestry, and biological sciences.    
==============================================================================

							  Revised August 1993


			   The Master of Science Program
			    Computer Science Department
			     Colorado State University


The Computer Science Department at Colorado State University offers a
program of study leading to the Master of Science Degree in Computer
Science.  Possible areas of emphasis are detailed in the "Research
Programs" paper.

ENTRANCE REQUIREMENTS

Minimum qualifications for normal admission to graduate work in
computer science, in addition to the University Graduate School
requirements, are as follows:
	- An understanding of computer organization, computer
architecture, data structures, program design, theoretical
foundations, and operating systems. 

	- A working  knowledge of calculus, linear algebra,
introductory probability, applied statistics, and discrete structures.

	- An overall  GPA of at  least 3.2  out of  4.0, and a GPA of
at least 3.2 in  Computer Science and Mathematics course work.

At this university  CS151,  CS155,  CS200,  CS201,  CS253, CS301,
CS314, CS370, M160,  M161,  M260 or  M261, and  ST301 or  ST309  cover
prerequisite  Computer Science and  Mathematics course work.
Undergraduate course work is the  usual method of obtaining and
demonstrating these   requirements.  Some   beginning graduate
courses require  additional background, e.g. in mathematics or digital
hardware design. 

Each applicant must take the Graduate Record Examination General Test
and the Subject Test in  Computer Science and  arrange for scores to
be sent directly to the Computer Science Department. 

The Department considers each applicant individually. An outstanding
applicant who is deficient in meeting some of these admission
requirements may obtain provisional admission; the student will take
deficiency course work (that will not count as credit toward the
M.S. degree), earn a GPA of at least 3.2 in deficiency courses, and
complete all such work in the first semester.

Applicants from non-English speaking countries must also take the Test
of English as a Foreign Language (TOEFL) and achieve a score of at
least 580.

ADMISSION PROCEDURES 

Before the Computer Science Department can process an application, all
the following materials must be present:

	- Completed application form.

	- Three  letters of  recommendation  from people  qualified to
evaluate  the applicant's  potential to undertake a successful
graduate program in computer science.

	- Official transcripts of all prior post-secondary academic
work. 
	- Graduate  Record Examination scores, including the Computer
Science Subject Test (and TOEFL scores if required). 

	- A check or money order for $30.00 payable to "Colorado State
University." 

Once complete, the Department will process the application and
promptly notify the applicant of admission status.  Notification of
financial support will be provided to admitted students as early as
possible.

Students may be admitted for the Fall or Spring semester.
Applications for admission and financial support should be completed
as early as possible before the first semester of study, particularly
if support is requested.  To obtain admission status information
applicants may write to the Computer Science Department or call (303)
491-5792.

FINANCIAL SUPPORT AND FEES 

An applicant admissible without deficiencies may also apply for a
teaching or research assistantship which carries a monthly stipend.
Summer support may be available.

Teaching and research assistantships include payment of tuition.  All
domestic graduate assistants are urged to become residents of Colorado
after one year of graduate work; the Department prefers not to pay
non-resident tuition for assistants after one year.  All students pay
a general fee assessment.  Ordinarily, Department financial support
for M.S. students is limited to four regular semesters.

The Department awards a few Colorado Fellowships to incoming students,
and considers all eligible applicants automatically; these fellowships
provide a small stipend.

Generally speaking, there are more applicants who want financial
support than there are assistant positions.  Support is awarded
competitively; if other factors are equal, preference is given to
U.S. residents.

REQUIREMENTS FOR THE M.S. DEGREE 

In addition to the University imposed requirements for the Master of
Science degree, the Department requires that one of the plans below be
followed in satisfying degree requirements:

	- Thesis: at least  39 credit hours of graduate course work,
including up to  eight credits of CS699, and a thesis.  This plan is
strongly recommended for students who intend to apply to the
Ph.D. program. 

	- Non-thesis: at least 39 credit hours of graduate course
work,  including a non-credit  research paper approved by the student's advisory committee.  No credits of CS699 may be included.

Note that computer science courses carry four credit hours each.  In
either plan, a maximum of eight credits of CS695 may be included.

For either plan the following rules apply:

	- 20 regular  computer science credits (excluding CS692,
CS695, CS699, CS795 and CS799) in the 500 or  600 level must be
included; at least four of these  credits must be at the 600 level.

	- All regular prerequisite and graduate course work will
receive conventional grades (no pass/fail option).

	- At least three  credit hours must be earned in a
graduate-level course from another  department;  this work must  be
approved in advance by the student's advisory committee.

	- No course  below the  400 level carries  graduate credit.
CS486, CS495 and CS496 may not be included for graduate credit. 

	- Each full-time graduate student will enroll in CS692
(seminar) for at least two semesters  for one credit  each semester.
One credit hour from CS692 may apply toward degree requirements.
Satisfactory performance requires at least 70%  attendance  in all
lectures given  each semester.   If required  by the student's
advisory committee, a student will prepare and present a seminar. 

	- Students  should  obtain  and  review  the University
requirements for the Master of Science program upon entering graduate
study.   Each M.S. candidate is responsible for adherence to all
Colorado State University regulations for graduate study.

Entering graduate students are assigned a temporary advisor.  The
University requires that after two semesters of study or 12 credit
hours earned, a graduate student will have selected an advisory
committee (an advisor, one or two additional Computer Science faculty
members, and one faculty member from another department) and will have
planned a program of study approved by the advisory committee.

Each thesis plan student must pass an oral final examination whose
content centers on (but is not limited to) the student's thesis.  This
examination is open to Department faculty and graduate students. Each
non-thesis plan student must supply copies of the required research
paper for approval by the advisory committee; at their discretion an
oral presentation may also be required.  Both the thesis and
non-thesis plans require submission of the Report of Final Examination
Results form to the Graduate School.  These must be completed by the
Graduate School deadline in the semester the student will receive the
M.S. degree.

A student who elects to write a thesis must supply the Graduate School
with two copies of the thesis as approved by the advisory committee.

The Graduate School reviews all graduate students each semester to
assure that satisfactory progress is being made toward completing
degree requirements.  A grade below C or a semester GPA below 3.0 is
unsatisfactory progress. Satisfactory progress toward completion of
thesis or research paper is also required.  The Graduate Committee
will make recommendations to students not making satisfactory progress
to rectify any problems.  Continued unsatisfactory performance
constitutes grounds for dismissal from the M.S. program.
==============================================================================

				      		      Revised September 1994


			 The Doctor of Philosophy Program
			    Computer Science Department
			     Colorado State University


The Computer Science Department at Colorado State University offers a
program of study leading to the Doctor of Philosophy in Computer
Science.  Possible areas of interest are detailed in the "Research
Programs" paper.

ENTRANCE REQUIREMENTS 

The doctoral program is available to students who have compiled
outstanding academic records in completing requirements for a Bachelor
of Science or a Master of Science degree in computer science.
Students with degrees in related disciplines may be admitted after
demonstrating strong capabilities to do graduate work in computer
science.

Applicants from non-English speaking countries must also take the Test
of English as a Foreign Language and achieve a score of at least 580.

ADMISSION PROCEDURES 

Before the Computer Science Department can process an application, all
of the following materials must be present:

	- Completed application forms.  For applicants currently in
our M.S. program, substitute a completed Graduate School Form 7. 

	- Three  letters of  recommendation  from people  qualified to
evaluate the applicant's  potential to  undertake a  successful
Ph.D. program in computer science. 

	- Official transcripts of all prior post-secondary academic work.

	- Graduate Record Examination scores, including the Computer
Science Subject Test (and TOEFL scores if required). 

	- Evidence of the ability to perform independent research.
Examples include published  papers,  technical reports,  an
M.S. thesis,  or written  work in progress. 

	- A written statement describing the  applicant's motivations
for pursuing a Ph.D. in computer science, including ideas about the
specific research that will be pursued. 

	- For applicants not currently enrolled in our M.S. program, a
check or money order for $30.00 made payable to "Colorado State
University."  

Note that admissions criteria, including course grades and GRE scores,
are considerably higher than corresponding requirements for admission
to the M.S. program.

Once complete, the Department will process the application and
promptly notify the applicant of admission status.  Notification of
financial support will be provided to admitted students as early as
possible.

Students may be admitted for the Fall or Spring semester.
Applications for admission and financial support should be completed
as early as possible before the first semester of study, particularly
if support is requested.  To obtain admission status information
applicants may write to the Computer Science Department or call (303)
491-5792.

FINANCIAL SUPPORT AND FEES 

Teaching and research assistantships include payment of tuition.  All
domestic graduate assistants are urged to become residents of Colorado
after one year of graduate work; the Department prefers not to pay
non-resident tuition for assistants after one year.  All students pay
a general fee assessment.  The Department awards a few Colorado
Fellowships to incoming students, and considers all eligible
applicants automatically; these fellowships provide a small stipend.

Generally speaking, there are more applicants who want financial
support than there are assistant positions.  Support is awarded
competitively; if other factors are equal, preference is given to
U.S. residents.

A small stipend increment is made for a student who has passed
Qualifying Examinations, and another increment is made for a student
who has passed the Preliminary Examination. Ordinarily Department
financial support is limited to eight regular semesters for students
who earn an M.S. elsewhere and limited to ten regular semesters for
students who earn an M.S. and Ph.D. here.

REQUIREMENTS FOR THE PH.D. DEGREE 

In addition to the University imposed requirements, the following
regulations apply:

	- Course work must include  a minimum of 72 credit hours
beyond the Bachelor of Science degree. 

	- At least nine credit hours should be included from a
supporting area. 

	- Approximately  half of  the  72 required credit hours should
be in course work;  the other  half  should be  dissertation  research
(i.e. CS799).  All dissertation credits must be earned at Colorado
State University. 

	- A minimum of 32 credit hours must be earned at Colorado
State University.

	- A Master of Science degree from an accredited college or
University may be accepted for up to 30 credit hours.   
	
	- Up  to  10 credit  hours earned  after completion  of a
Master  of Science degree  may  be  accepted  for  transfer  if
recommended by the candidate's graduate committee. 

	- Unless previous experience  has been gained, each
Ph.D. student must teach at least one course while in the program. 

	- Work  done more than  10 years before the  completion of the
Ph.D. program cannot be used to satisfy any degree requirement. 

	- Each  full-time  Ph.D. student will enroll in CS692
(seminar) for at least two semesters for one credit each time. One
credit hour from CS692 may apply toward degree requirements.
Satisfactory performance requires at least 70% attendance in all
lectures given each semester. Each Ph.D. student should prepare and
present a seminar while in the program.

	- Students  should  obtain  and  review  the University
requirements for the Doctor  of  Philosophy  program  upon  entering
graduate study.  Each Ph.D. candidate is  responsible  for  adherence
to all  Colorado State  University regulations for graduate study. 

Entering graduate students are assigned a temporary advisor. The
University requires that after two semesters of study or 12 credit
hours earned, a graduate student will have selected an advisory
committee (an advisor, two additional Computer Science faculty
members, and one faculty member from another department) and will have
planned a program of study approved by the advisory committee.

Each Ph.D. student must satisfy the Breadth Requirement (see below).  

Each Ph.D.  student is required to take the written Qualifying
Examination (see below).  This examination determines critical
thinking skills and background knowledge.  This examination is offered
once each Fall and Spring semester.  Information regarding study
materials is available from the Faculty.

Each Ph.D. student is required to take the oral Preliminary
Examination (see below) within 12 months of passing the Qualifying
Examination.  This centers on, but is not limited to, the student's
proposal for dissertation research.  Passing this examination admits
the student to Ph.D. candidacy.

Each Ph.D.  candidate is required to write a dissertation representing
a significant contribution to the chosen field of research.  A
properly typed copy of the dissertation must be submitted to each
committee member at least two weeks prior to the final examination.
University regulations concerning format and disposition of additional
copies must be observed.

The final examination of a Ph.D.  candidate is the defense of the
dissertation and related subject areas.  Regulations concerning the
format and conduct of the final examination are contained in the
Colorado State University Bulletin.

Evaluation and feedback on a student's progress are important to both
the student and the department.  Near the end of each semester, the
entire faculty meets to evaluate the progress of each Ph.D. student.
Prior to this meeting each student should meet with his/her advisor to
prepare a report describing the student's progress, including
coursework, research, teaching, and thesis.  The faculty sends each
student a written report of their evaluation.

The Graduate School reviews all graduate students each semester to
assure that satisfactory progress is being made toward completing the
degree requirements.  A grade below C or a semester GPA below 3.0 is
unsatisfactory progress and constitutes grounds for dismissal.

BREADTH REQUIREMENT 

A student must take at least 8 regular computer science courses
(excluding CS692, CS695, CS699, CS795, CS799) at the 500 or 600 level;
at least 3 of these courses must be at the 600 level.  (A pair of
two-credit courses counts as one course.) A grade of A must be
obtained in at least 6 of these courses, including a grade of A in at
least 2 courses at the 600 level.  A course with a grade below B
cannot be applied toward this requirement.

A student who has taken graduate coursework at another institution
prior to admission may apply to the Graduate Committee to have some of
this coursework applied toward the above breadth requirement.  In such
cases the graduate committee will prorate the above requirements as
appropriate to the individual case, but at least half of the above
requirements must be completed at Colorado State University.

EXAMINATIONS 

  QUALIFYING EXAMINATION 

	The  Qualifying Examination  must be taken not  later than the
semester after the breadth requirement has been completed.  This
examination  is intended to ascertain the student's readiness to
undertake serious concentrated research. The student  will be examined
in two  areas selected by the student from the list of approved
topics.  For each examination, the student  will be  given a
bibliography  and a set  of  take-home questions.   The student will
have two weeks to prepare a written report based on the bibliography
and the questions. The   student will   also take an   oral
examination   on this material.  The presentation  and defense  by the
student can be expected to take up most of the  examination,  but
students   should expect   some general questions not directly related
to the take-home questions. The  examinations in both areas must be
taken during the same semester.  If a student   fails either   or both
parts of   this   examination,  the failed examination(s) may be
retaken once, but must be during the following semester. The  retake
need not be in the  same area as  the failed examination(s), but only
one retake per failed examination is allowed. 

  PRELIMINARY EXAMINATION 

	Following successful completion of the Qualifying Examination,
each student will  prepare  a dissertation  proposal and take the
Preliminary Examination. Passing   this   examination admits   the
student to   Ph.D.  candidacy.  The dissertation  proposal  should be
prepared in  close  consultation  with the student's advisor, and
should be available to all  committee members at least one week prior
to the examination.   It should reflect an  extensive critical
literature survey, and contain an accurate assessment of the
state-of-the-art in  the  area of  research, a  precise statement of
the problem to be solved, motivation for pursuing  the research, and
evidence to the effect that there is a good likelihood the problem is
solvable with reasonable effort. The  Preliminary  Examination must
be taken within  one year of  passing the Qualifying Examination.
Successful completion of the Preliminary Examination results  in
agreement  between the student  and the committee as to what will
constitute successful completion of the dissertation research.  The
committee may  choose to  reconvene  the  examination to  allow  the
student to further research   the   problem,   complete   additional
course work, or  revise the dissertation proposal document. 

Graduate School regulations govern the Preliminary Examination.  The
Graduate School  must be  notified of  the  scheduling of the
examination at least two weeks in advance, GS Form 16 is used to
report the examination results to the Graduate School, and failure to
successfully complete the examination on the second trial mandates
dismissal from the program. 
==============================================================================

						        Revised October 1994


				Course Descriptions
			    Computer Science Department
			     Colorado State University


CS110     Personal Computing I
     Prerequisite:  None. 
     Introduction  to   personal  computing: hardware/software
concepts,  operating system commands, word processing, spreadsheets,
programming.   
     No credit toward Computer Science major.  

CS151     Introduction to C++ Programming  
     Prerequisite:  M121. 
     Credit is not allowed for both CS151 and CS/EE101.
     Introduction to  structured programming  using Pascal. Language
syntax, problem solving, basic data structures, searching, sorting,
recursion. 

CS152     FORTRAN Programming Module 
     Not intended as a first course in programming. 
     Prerequisite:  CS151. 
     Credit not allowed for both CS152 and CS150.
     Constants, variables, expressions, statements, program and data
structures, I/O, libraries. 
     
CS155     Computer Organization 
     Prerequisite:  CS151, M124.
     Digital   logic,   digital   systems,   representation of  data,
memory  system  organization and architecture, assembly language programming.

CS200     Algorithms and Data Structures
     Prerequisite:  CS151, concurrent registration in CS/M201.
     Data structures;   abstract  data   types,   complexity
analysis;    sorting,  searching; examples from file systems,
databases, graphics. 
     
CS201     Discrete Structures 
     Prerequisite:  CS151, M160.  
     Credit not allowed for both CS201 and M201.
     Logic  & proof  techniques;  sets and  combinatorics; relations
and functions;  graphs and trees; morphisms of algebraic structures. 
     
CS252     C++ Programming Module 
     Not intended as a first course in programming.  
     Prerequisite:  CS151 or prior programming experience. 
     Data types, expressions, program structures and idioms, I/O, libraries.

CS253     Computer Programming Languages 
     Prerequisite:  CS155, CS200, CS/M201.  
     Virtual machines, data types, sequence control, programming
     paradigms, storage  management, grammars and translation,
     semantics. 

CS301     Foundations of Computer Science 
     Prerequisite: CS200, CS/M201, M229.  
     Formal   languages,    automata;    algorithm-design,
     complexity   classes; computability;  process coordination;
     algorithms for artificial intelligence.   
     Correctness efficiency.
    
CS314     Software Development Methods 
     Prerequisite:  CS253. 
     Methods used to develop large-scale software projects in
industry, emphasizing design, implementation, and testing. 

CS370     System Architecture and Software 
     Prerequisite:  CS155, CS200. 
     Memory   organization;  I/O control; alternative architectures;
multitasking;  process   control,  security,   networking,
distributed computing. 
     
CS410     Introduction to Computer Graphics 
     Prerequisite:  M229, CS314. 
     Graphics  hardware  and  software.    Drawing  simple  objects.
Coordinate transformations in 2D and 3D. Modeling and viewing complex
2D and 3D objects. 
     
CS415     Software Development Laboratory I   
     Fall Only. 
     Prerequisite:  CS314.  
     Group  software  development  project in a  realistic  setting.
Requirement  specification, planning,  design documentation,
integration, and system test  plan.  Must be  taken in sequence with
CS416 in the same academic year to count as a  Group I credit.
     
CS416     Software Development Laboratory II   
     Spring Only. 
     Prerequisite:  CS415.  
     Implementation, unit test plan, test execution, delivery. 
     Must be  taken in sequence with CS415 in the same academic year
to count as a Group I credit. 
     
CS420     Formal Languages and Automata  
     Prerequisite:  CS301. 
     Advanced concepts in formal  languages,   grammars,  automata.
Deterministic, non-deterministic machines.  Computability,
decidability.  Complexity classes. 
     
CS430     Database Systems 
     Prerequisite:  CS314.  
     Database  analysis,  design,  administration,  implementation,
hierarchical,  network relational models; data sub-languages; query
facilities. 
     
CS440     Introduction to Artificial Intelligence 
     Prerequisite:  CS253, CS301. 
     Symbolic   computation  through   programming  languages   LISP
and  PROLOG; applications of symbolic computing in artificial
intelligence. 

CS451     Operating Systems 
     Prerequisite:  CS370.  
     Operating  system  design  and  implementation,  file  systems,
distributed  operating systems, case studies. 
     
CS453     Introduction to Compiler Construction 
     Prerequisite:  CS253, CS301. 
     Functional components of a compiler: modules, interfaces, lexical
and syntax analysis, error recovery, resource allocation, code
generation. 
     
CS457     Data Communications 
     Prerequisite:  CS370.  
     Principles  of  communications,  basic  components, codes and
error control, line  sharing  techniques, common carrier  services,
link  protocols, simple networks.

CS470     Computer Architecture 
     Prerequisite:  CS370. 
Instruction sets.  Control  unit: hardwired  and  microprogramming.   Memory
systems.  Computer arithmetic. I/O and bus control.  Performance evaluation.
Pipelining.  RISC processors.

CS475     Parallel Programming 
     Prerequisite:  CS370. 
Parallel   programming   techniques for shared-memory   and  message-passing
systems; process synchronization, communication; example languages.
     
CS486     Practicum var [1-4]  
Maximum of  twelve credits  allowed  for any  combination  of CS486, CS495 &
CS496(A-H).  
Supervised   work  experience in  approved   Computer  Science setting  with
periodic consultation of faculty.

CS495     Independent Study [var]  
Maximum of  twelve  credits  allowed  for any  combination of CS486, CS495 &
CS496(A-H).  

CS496     Group Study (A-H) var [1-4]  
Maximum  of  twelve  credits allowed  for any  combination of CS486, CS495 &
CS496(A-H).

     A:  Theory   of  computing                       B:  Numerical methods    
     C:  Computer architecture                        D:  Software  systems   
     E:  Artificial  intelligence                     F:  Simulation  
     G:  Information retrieval                 H:  Applications of computers 

CS510     Computer Graphics 
     Prerequisite:  CS410.  
Displaying   3D  objects  with realistic shading and lighting calculations.
Hidden surface removal, Gourand and Phong shading, and ray tracing.
     
CS514     Software Engineering Methods 
     Prerequisite:  CS314. 
     The  software  development process, software  project management, software
     metrics, formal methods, testing and verification, software  tools, design
     methods.
     
CS515     Software Engineering Project I   
     Fall Only. 
     Prerequisite:  CS514 or concurrent registration. 
     Advanced   technical   issues  from   practical   management  perspective.
     Supervisory,   planning,   estimation,   specification,   and   evaluation
     techniques.
     
CS516     Software Engineering Project II  
     Spring Only. 
     Prerequisite:  CS515. 
     Status   reports,   schedule   updates,   coding  documents,   maintenance
     considerations.

CS520     Analysis of Algorithms 
     Prerequisite:  CS420. 
     Orders  of  magnitude,  asymptotic  complexity, lower  bounds,  recurrence
     equations; algorithmic methods,  P, NP completeness; intractable problems
     parallel algorithms.
     
CS540     Artificial Intelligence 
     Prerequisite:  CS440. 
     Knowledge   representation,   automated   reasoning,    natural   language
     understanding,  vision  processing,  expert  systems and machine learning;
     AI programming.

CS551     Principles of Operating Systems 
     Prerequisite:  CS451. 
     Advanced  topics  in  concurrency,  deadlock  protection,  multiprocessor
     scheduling, computer system modeling, and virtual memory management.
     
CS553     Algorithmic Language Compilers 
     Prerequisite:  CS420, CS453. 
     Compiler   construction;   lexical  analysis,  parsing,  semantics,  code
     generation, and error detection.
     
CS554     Computer System Design 
     Prerequisite:  CS470. 
     Array  devices,  register-level design,  cascading/slicing, RALU, control
     options, microprogramming, buses, system design.
     
CS557     Distributed Systems 
     Prerequisite:  CS451. 
     Development of concurrent  programs, analysis of distributed programs and
     operating systems.
     
CS570     Advanced Computer Architecture
     Prerequisite:  CS470. 
     Pipelined CPU  design.    Vector processors.   Cache  memory  design  and
     evaluation.    Advanced computer arithmetic.  VLIW, superscalar, parallel
     architectures.
     
CS575     Parallel Processing 
     Prerequisite:  CS475. 
     Parallel computation  models,  algorithms, complexity analysis, numerical
     algorithms.
     
CS612     Topics in Computer Graphics 
     Prerequisite:  CS510. 
     Computer graphics research topics.

CS614     Advanced Topics in Software Engineering (A-F) var [1-4]
     Prerequisite:  CS514. 
     Research topics  in software  engineering. 
     
          A:  Specification and design           B:  Testing  and verification 
          C:  Software environments and tools      
	  D:  Software measurement, analysis and evaluation  	
          E:  Software process    F:  Software reliability and fault tolerance

CS620     Topics in Computing Theory (A-E) var [1-4] 
     Prerequisite:  CS520 or written consent of instructor. 
     
          A:  Algorithms                                B:  Information theory
          C:  Logic in computing      D:  Formal languages and automata theory 
          E:  Mathematical foundations

CS630     Fault-Tolerant Computing 
     Prerequisite:  CS370. 
     Test  generation;   fault  modeling;   random,  compact  testing;   error
     detection, correction;  reliability analysis;  fault-tolerant,   testable
     design techniques.
     
CS640     Advanced Artificial Intelligence I  
     Fall Only. 
     Prerequisite:  CS540.  
     Research topics in artificial intelligence including genetic algorithms;
     neural networks and connectionist models; machine learning;  planning and
     automated reasoning.

CS641     Advanced Artificial Intelligence II   
     Spring Only. 
     Prerequisite:  CS640.  
     Advanced research topics in artificial intelligence.
     
CS651     Advanced Topics in Operating Systems 
     Prerequisite:  CS551. 
     Topics in distributed operating systems, system reliability,  performance
     evaluation and modeling.
     
CS653     Advanced Topics in Programming Languages (A-B) var [1-4]  
     Prerequisite:  CS453 or written consent of instructor. 
     
          A:  Language design and definition       B:  Language implementation
     
CS670     Topics in Architecture/Systems (A-F) var [1-4]  
     Prerequisite:   CS570 or EE554 or written consent of instructor.  
     Credit is not allowed for both CS670(A-F) and EE670(A-F). 
     
          A:  Data flow                B:  Performance evaluation and modeling 
          C:  Distributed systems         D:  Architecture of advanced systems
          E:  Computing arithmetic                       F:  Microarchitecture 

CS692     Seminar  [var] 

CS695     Independent Study [var] 

CS696     Group Study [var] 

CS699     Thesis [var] 

CS799     Dissertation [var] 


RELATED COURSES 

M160     Calculus for Physical Scientists I 
     Prerequisite:  M126; concurrent registration in M124.  
     Credit is allowed  for only one of  the  following sequences:  M141; M155 
     -- M255; M160 -- M161 --  M261.  
     Limits,  continuity,   differentiation,  and  integration  of  elementary
     functions with applications; conic sections.
     
M161     Calculus for Physical Scientists II 
     Prerequisite:   M124 and  M160. 
     Credit is allowed  for only one of  the  following sequences: M141;  M155 
     -- M255; M160 -- M161 -- M261.  
     Differentiation  and  integration of transcendental functions, sequences,
     series.
     
M229     Matrices and Linear Equations 
     Prerequisite:  M121. 
     Solutions  of   systems  of  linear  equations,  augmented  matrix,  row
     reduction, matrix  operations, inverses,  determinants,  eigenvalues and
     eigenvectors.
     
M260     Elementary Linear Algebra 
     Prerequisite:  M126 and M229. 
     Geometry and  algebra of  Rn,  subspaces,  linear  independence,  basis,
     dimension, solutions  of  linear  systems,  linear  transformations  and
     matrices.
     
M261     Calculus for Physical Scientists III 
     Prerequisite:   M161.   
     Credit is allowed for  only one of  the following sequences:  M141; M155 
     -- M255; M160 -- M161 -- M261.  
     Vector functions,  partial  differentiation,  cylindrical and  spherical
     coordinates, multiple integrals, line integrals, Green's theorem.
     
PL305F    Philosophical Issues in the Information Sciences 
     Prerequisite:  None.  
     Consideration of  the possibility  of machine  intelligence; social and
     ethical issues in computer science.
     
ST301     Introduction to Statistical Methods 
     Prerequisite:   M120 and  M121.  
     Credit  allowed for only  one  course: ST301, ST307/EH307, ST309, ST311. 
     Techniques in  statistical inference;  confidence intervals, hypothesis
     tests, simple correlation and regression, one-way analysis of variance.
     
ST309     Engineering Statistics 
     Prerequisite:   M161.  
     Credit  allowed for  only  one course: ST301, ST307/EH307, ST309, ST311. 
     Probability   and   distribution   theory,   estimation   and   testing,
     correlation   and   regression,   applications   to   engineering   and
     manufacturing.
=============================================================================

						      Revised September 1994


			    Research Programs, 1994--95
			    Computer Science Department
			     Colorado State University

FACULTY

Charles Anderson, Ph.D., University of Massachusetts; Assistant professor
     Neural  networks  for control  and signal  processing,
reinforcement learning, pattern classification, artificial
intelligence, computer graphics. 

J. Ross Beveridge, Ph.D., University of Massachusetts; Assistant professor
     Computer  vision,  model  matching, sensor  fusion, visual
feature extraction, local search optimization, software environments. 

James Bieman, Ph.D; University of Southwestern Louisiana; Associate professor
     Software  engineering,  automated  testing and  analysis,
software measurement  (metrics), object oriented software, programming
languages. 

A. P. Wim Bohm, Ph.D., University of Utrecht; Associate professor
     Declarative   programming   languages,  algorithms   design  for
declarative programming languages, multithreaded architectures. 

Michael E. Goss, Ph.D., University of Texas at Dallas; Assistant professor
     Graphics,   terrain   visualization   and   geographic
applications,  volume visualization, visual simulation, fractals,
digital signal processing. 

Dale Grit, Ph.D., University of Minnesota; Associate professor
     Parallel functional languages and architectures, operating systems.

Adele Howe, Ph.D., University of Massachusetts; Assistant professor
     Artificial intelligence, evaluating AI systems, planning, agent
architectures, failure recovery. 

Robert Kelman, Ph.D., University of California at Berkeley; Professor emeritus
     Computational methods, mathematical software.

Yashwant Malaiya, Ph.D., Utah State University; Professor
     Fault-tolerant  computing, software  reliability  management,
fault  modeling, testing, hardware/software reliability evaluation,
testable design. 

Walid Najjar, Ph.D., University of Southern California; Assistant professor
     Architecture of massively parallel systems, multithreaded
architectures, code generation and optimizations, performance
evaluation and analytical modeling of computer systems. 

Rodney Oldehoeft, Ph.D., Purdue University; Professor and Chairman
     Parallel   processing software and systems, functional
programming, operating  systems. 

Kurt Olender, Ph.D., University of Colorado; Assistant professor
     Software   engineering,   development   environments, software
analysis and  evaluation tools, programming languages. 

Pradip Srimani, Ph.D., University of Calcutta; Professor and Acting Chairman
     Parallel  and distributed  computing,  interconnection  networks,
algorithms, graph theory applications. 

Anneliese von Mayrhauser, Ph.D., Duke University; Professor
     Software engineering, maintenance, metrics, testing, reliability,
performance  evaluation. 

Darrell Whitley, Ph.D., Southern Illinois University; Associate professor
     Artificial intelligence, machine learning, genetic algorithms,
neural networks. 

Karl Durre, Ph.D., Technical University of Hannover; Affiliate faculty
     Algorithms and data structures, human-computer interaction,
interfaces for the blind. 

Gary Herron, Ph.D., University of Utah; Affiliate faculty
     Computer Graphics. 

Anura Jayasumana, Ph.D., Michigan State University; Affiliate faculty
     Networks, VLSI.

Julian Kateley, Ph.D., Michigan State University; Affiliate faculty
     Computer systems evaluation, computer center management.

Randy Michelson, Ph.D., University of Southwestern Louisiana; Affiliate faculty
     Software  engineering,   software  systems for   high
performance  computing,  advanced simulation techniques for complex
systems.  

Jack Walicki, Ph.D., Marquette University; Affiliate faculty
     Architectures  and  algorithms for parallel  processing and
signal processing, microprogramming. 

DEGREE PROGRAMS AND AREAS OF STUDY

The Computer Science Department at Colorado State University offers
programs of study leading to Bachelor of Science, Master of Science,
and Doctor of Philosophy degrees in Computer Science.  Possible areas
of emphasis for graduate studies include:

Algorithms 		    Applicative languages 	Architecture 
Artificial Intelligence	    Computational Methods 	Computer Vision 
Distributed Systems 	    Fault-Tolerant Computing 	Genetic Algorithms
Graphics 		    Languages and Compilers 	Neural Networks 
Operating Systems 	    Parallel Processing 	Performance Evaluation 
Software Engineering

COMPUTING FACILITIES

The Computer Science Department maintains several distinct laboratories:

     Architecture   studies:  an   HP9000/S400   server and   five
400t  stations. Artificial intelligence/neural nets: a CNAPS 128-node
parallel computer from Adaptive   Solutions, Inc.,   five IBM
RS6000/320H   stations and  five  X-terminals. Graphics:  an
HP9000/720 workstation, a 433VRX system, two 375SRX's and five 340
workstations. Networks  and  distributed  computing: an  ATT 80386
server  and  18 80386SX  stations.  Software  engineering:  three
HP9000/710 workstations, an S400 server and 17 M400 workstations.  

An HP9000/735 and numerous HP, Sun, and DEC servers and workstations
provide general purpose computing.  The Department houses a 16-cpu
Sequent Balance 21000 multiprocessor system for parallel processing
research.  All the preceding run Unix and are fully networked.
Researchers have access to other multiprocessor systems at remote
locations.  In addition, the Department has a variety of X-terminals
and microcomputers for instructional and research purposes.  Several
microprogrammable systems from AMD and TI are used for instructional
purposes.  Laser printers are available.

Academic Computing and Networking Services maintains several IBM
RS6000 servers running AIX, and a Computer Visualization
Laboratory. The campus backbone network connects many sites and
provides access to the Internet.

CURRENT RESEARCH PROJECTS 

Learning Algorithms for Neural Networks: Neural networks are a highly
     parallel mode of processing with very simple computing elements
     that perform a "sub-symbolic" form of computation and
     representation.  These nets learn a set of weighted connections
     among nodes that map an input pattern onto an output pattern.  In
     this project, we are investigating ways of improving the learning
     efficiency of neural networks.  Our approach involves novel
     architectures and methods for learning new internal
     representations.  Investigators: Charles Anderson and Darrell
     Whitley.

Neural Networks for Control: Current design techniques for automatic
     controllers require knowledge about the system to be controlled.
     Often this knowledge is not available.  We investigate using
     neural networks to improve the performance of controllers by
     learning from on-line experience.  We focus on increasing the
     efficiency of reinforcement learning algorithms.  Investigator:
     Charles Anderson.  Sponsors: National Science Foundation;
     American Gas Association; CSU.

EEG Recognition with Neural Networks: We are studying the feasibility
     of human-computer interaction through the use of on-line
     recognition of electroencephalogram (EEG) patterns.  Our approach
     is to develop new algorithms for developing internal
     representations of EEG signals.  For this work we are using our
     CNAPS 128-node parallel computer to process the signals and to
     train the neural networks.  Investigator: Charles Anderson.
     Sponsor: National Science Foundation.

Color, FLIR, & LADAR Object Recognition: We are building new
     algorithms which simultaneously align 3D object models to range,
     IR, and color imagery in order to more reliably solve recognition
     problems involving occluded objects, objects seen at unusual
     angles, and objects in cuttered settings.  Our algorithms are
     being applied to Reconnaissance, Surveillance, and Target
     Acquisition problems arising in the context of the Unmanned
     Ground Vehicle program.  Investigator: J. Ross Beveridge.
     Sponsor: ARPA.

ARPA Image Understanding Environment Image Objects: ARPA is developing
     a common software development environment to support university
     and industrial image understanding research. Dr. Beveridge serves
     on the Image Understanding Environment (IUE) Technical Committee
     and is principle architect of the image object hierarchy.  He is
     currently overseeing the development of the first implementation
     of the image object hierarchy.  Investigator: J. Ross Beveridge.
     Sponsor: ARPA (subcontract through Amerinex A.I.).

Automated Software Testing: One mechanism for finding faults in
     software is through the use of executable assertions.  Executable
     assertions are rarely used in practice, due, in part, to the
     actual and perceived overhead of defining and embedding the
     assertions in code.  One way to expand the use of executable
     assertions is with tools that help developers manage assertion
     definition and placement.  We evaluate possible alternatives for
     such tools in context with the design of our own assertion
     insertion tool, C-Patrol.  C-Patrol allows a developer to
     reference a set of previously defined assertions, written in
     virtual C, bind assertion parameters, and direct the placement of
     the assertions by a pre-processor.  We are now evaluating the use
     of C-Patrol for executable specifications and oracles, debugging,
     and test script generation.  Investigator: James Bieman.
     Sponsors: Colorado Advanced Software Institute.  Collaborators:
     Storage Technology Corp.; Micro-Motion, Inc.

Reuse Metrics for Object Oriented Software: We are identifying a set
     of measurable reuse attributes appropriate to object oriented and
     object based systems, deriving a suite of metrics which quantify
     these attributes, and designing prototype tools to take these
     measurements.  We are collecting software data for empirical
     studies of software reuse; we are also investigating the
     relationship between reuse and structural properties of software
     including coupling and cohesion; we are exploring techniques for
     graphical visualization of software reuse.  Investigator: James
     Bieman.  Sponsors: NASA Langley Research Center.

Measurement and Analysis of Software Functional Cohesion: We are
     developing measures of functional cohesion following the approach
     used in the physical sciences to develop measurements.  We define
     abstract models of functional cohesion and use these models to
     identify cohesion attributes and define measures of these
     attributes.  We are examining the orderings that these measures
     impart on software modules. We plan to develop cohesion metric
     tools and conduct empirical studies of cohesion in real world
     software.  Investigator: James Bieman.

Automatic Analysis from Algebraic Specifications: We seek methods for
     using algebraic specifications to automatically analyze software
     implementations.  One approach is to convert algebraic axioms
     into sequencing specifications, which are used to statically
     analyze programs using the Cecil/Cesar system to determine
     whether specifications are satisfied by the implementation.
     Investigators: James Bieman and Kurt Olender.

Applicative Language Features: We investigate the requirements of
     scientific programming versus the features offered by current
     applicative programming languages, and compare these to
     conventional programming languages. A first comparative language
     study involves Fortran, SISAL and Id.  We focus on the
     implementation of numerical algorithms and study language
     features, their expressiveness and efficiency.  Investigator: Wim
     Bohm.

Compilation of Functional Languages for Hybrid von Neumann-Dataflow
     Machines: The research here is twofold.  On the higher level we
     apply data dependence analysis techniques to determine
     uniqueness, completeness, and order of evaluation of array
     definitions.  On the lower level we study mappings from IF2, a
     block-structured data dependence form with explicit memory
     management, to machine independent dataflow code.  We map this
     code on paper as well as real multithreaded machines.
     Investigators: Wim Bohm and Walid Najjar.  Sponsor: National
     Science Foundation.

VISA: A Virtual Shared Addressing System for Distributed Memory
     Multiprocessors: We study a run-time system for distributed
     memory multiprocessors, that provides a single address space and
     latency tolerance, and is machine and language independent.  Data
     distribution is supported by mapping functions, that attempt to
     provide latency avoidance by tying loop threads to the array
     segments they work on.  We target VISA to be the back end for the
     standard Sisal compiler. Moreover, we use VISA as a stand alone
     run- time system that provides a shared memory abstraction for
     distributed C programs.  Investigators: Wim Bohm and Rod
     Oldehoeft.  Sponsor: Sandia National Laboratories.

Numerical Algorithms in Id: We study the parallel complexity of
     numerical library software, written in Id, a dataflow language
     designed at MIT, and executing on the Motorola/MIT Monsoon
     machines and, in a later stage of the research, on the
     Motorola/MIT *T machines.  Investigators: Wim Bohm and Bob
     Hiromoto (UT at San Antonio).

Detail Enhancement in Volume Images: This project investigates methods
     for enhancing detail in 3D images rendered from medical imaging
     volume data such as Magnetic Resonance (MR), Computed Tomography
     (CT), and others. Digital signal processing techniques have been
     applied to MR data to enhance the display of fine detail in the
     generated images by improving the calculation of surface normal
     vectors used for shading.  Research continues into improvements
     to the shading calculations and into the application of these
     techniques to other types of data in addition to MR.
     Investigator: Michael Goss.

Realistic Rendering of Terrain Models: We are developing computer
     graphics techniques for generating realistic images at
     resolutions comparable to aerial photographs.  These images will
     allow visualization of changes to terrain features based on land
     use and forest growth patterns.  These techniques will generate
     both photo-realistic images with detailed lighting and shadows,
     and slightly less realistic images which a user can examine
     interactively.  Images will be generated based on digital
     elevation models, land cover and use data, forest growth and
     terrain erosion models, aerial photographs, and synthetic texture
     and terrain.  Investigators: Michael Goss and Denis Dean (Forest
     Sciences).

Visualization of Multi-Sensor Data for Object Recognition: Model-Based
     Object Recognition techniques use sensor data to find the 3D
     position in a scene of an object which matches one of a set of
     object models known to the system.  We are investigating methods
     to allow a user to interact with sensor data and the model
     matching system in a 3D environment.  This visualization
     environment combines range imagery, color imagery, thermal
     (infrared) imagery, and CAD models of objects to be recognized.
     Investigators: Michael Goss and J. Ross Beveridge.

Distributed SISAL: We are extending a shared memory implementation of
     SISAL to execute on distributed, message-passing architectures. A
     primary issue is the automatic mapping of processes across the
     set of processors to distribute the workload while holding down
     communication costs.  Other issues to examine include minimizing
     communication costs for arrays, distributing program code,
     collecting garbage cells, and examining variants of the basic
     evaluation strategy.  Investigator: Dale Grit.

Experimental Methods for Evaluating Planning Systems: AI planners are
     difficult to evaluate because they involve many components and
     are embedded in complex environments.  We are developing tools to
     facilitate experiments to answer the following questions: How
     well does a component of a planning system work, and how will
     changing the task, environment or structure of the component
     affect its performance?  Investigator: Adele Howe.  Sponsor:
     Advanced Research Projects Agency.
    
Developing Reliable Plan Knowledge Bases: Knowledge based planning
     systems tend to be brittle when applied in real or realistic
     environments.  To address this brittleness, we are developing a
     methodology and tools for analyzing why planning systems fail and
     determining how those failures can be prevented or repaired at
     run-time.  Investigator: Adele Howe.  Sponsor: National Science
     Foundation

Dual Fourier Analysis: Algorithms and analysis of applications are
     being investigated for a broad class of dual and multiple Fourier
     series.  Studies include numerical procedures, algorithmic
     implementation of closed form solutions, domains of
     applicability, existence of solutions, and applications to heat
     transfer, fracture mechanics, cryptology, and communication
     theory.  Investigator: Robert Kelman.

Reliability Management through Self-Testing: We explore methods of
     achieving ultra-high reliability in systems. Over long durations
     simple redundancy ceases to be useful and can actually decrease
     reliability. This investigation focuses on testing as a means for
     assuring a very high degree of readiness, in five areas.
     Readiness: To achieve a high assurance of health, a system must
     self-test periodically.  The concept of readiness includes
     traditional and information- theoretic aspects of reliability.
     Techniques to evaluate readiness are under study.  Design faults:
     As software testing progresses, faults are discovered and
     corrected, and several reliability models attempt to describe
     this process.  We compare the effectiveness of these models, and
     investigate a unified model.  Register- level self-testing:
     Increasing complexity requires that testability be examined at
     the register-sandwich level.  We pursue measures of testability
     and fault coverage for use in optimal design.  High performance
     testable architectures: High performance need not be incompatible
     with testability.  We are investigating a highly testable
     microarchitecture that eliminates the partition between data and
     control, that is configurable as a RISC or CISC design, and that
     shows promise of high performance.  Modeling faults caused by
     aging: We are trying to develop techniques to handle faults from
     aging of VLSI devices.  Investigator: Yashwant Malaiya.  Sponsor:
     Strategic Defense Initiative/Office of Naval Research

Evaluation of Adaptive Routing Strategies in Interconnection Networks:
     The objectives of a routing algorithm are to provide (1) minimal
     latency, (2) freedom from deadlock and livelock and (3) tolerance
     to fault.  In this project we evaluate the cost performance
     tradeoffs of various adaptive routing algorithms, both minimal
     and non-minimal in path length.  The evaluation is based on
     statistical results derived experimentally from simulation as
     well as analytical results derived from queuing models of
     interconnection networks.  Investigators: Walid Najjar and Pradip
     Srimani.

Multithreaded Execution and Processor Architectures:} In this project
     we adopt a quantitative approach to the evaluation of the
     critical parameters that determine the performance of
     multithreaded and hybrid von Neumann-dataflow processors.  In
     particular, we focus on architectural design alternatives that
     permit exploiting instruction, data and stream locality in
     dataflow graphs with minimal or no loss of program
     parallelism. The results indicate that a significant performance
     improvement can be obtained by moving the dataflow execution
     paradigm to a coarser granularity with von Neumann like execution
     within a grain.  Investigators: Walid Najjar and Wim Bohm.
     Sponsor: National Science Foundation.

SISAL: We have developed, with other research groups, an implicitly
     parallel programming language.  We share a common intermediate
     form and optimizers.  SISAL has run on a dataflow machine at the
     University of Manchester, and is now available for several
     commercial MIMD systems, on a multi-vector processor, and many
     sequential machines.  Current translation software produces code
     that runs sequentially as fast as conventional programs, and
     automatically yields efficient parallel execution on
     multiprocessors.  Work continues on a distributed-memory version
     based on a custom virtual shared memory layer.  A successor
     language version has been designed with improved array
     manipulation, a modern modular structure, a refined syntax, and
     full interface with other languages.  Investigators: Rod
     Oldehoeft and Wim Bohm.

Static Evaluation of Sequencing Constraints: Sequencing errors form an
     important class of faults in software.  We can extend static data
     flow analysis techniques to detect violations of user-specified
     sequencing constraints.  We have constructed and are
     experimenting with a sequencing analysis tool and constraint
     specification language.  Investigator: Kurt Olender.

Network Topology: Topology plays an important role in the performance
     evaluation of any computer network. The objective of this project
     is to investigate different fault tolerance properties and
     routing algorithms in the presence of faults.  We examine known
     topologies and also design new, efficiently incrementable
     networks.  Investigator: Pradip Srimani.

Range Search: Multiple attribute key retrieval or multidimensional
     range searching has many applications in database management,
     computer graphics and computational geometry.  Several
     interesting tree structures have been designed. We plan to
     develop parallel algorithms to improve execution time further.
     The objective is to develop our understanding of different data
     structures and algorithms.  Investigator: Pradip Srimani.

Distributed Systems: We are interested in designing fault tolerant
     mutual exclusion algorithms and evaluating their performance.
     Recently we have examined the problem of deadlock detection and
     studied heuristic algorithms for deadlock avoidance.
     Investigator: Pradip Srimani.

Software Maintenance Toolkit: The Ada Maintenance Toolkit (AMT)
     project develops algorithms and tools based on them that
     facilitate code changes, based on fully incremental analysis. The
     AMT includes tools for regression analysis, metrics, chunking,
     and a new approach to user interfaces.  We are also investigating
     ways to preserve a good object oriented design during
     maintenance.  Lastly, addition of formal semantics will
     facilitate reverse engineering.  Investigator: Anneliese von
     Mayrhauser.

Software Reliability Simulator: There is much data about software
     reliability.  Some are available early, during detailed design.
     Others are represented in program structure of higher level
     languages.  We are building a simulator that takes these data and
     predicts software reliability levels based on them.
     Investigator: Anneliese von Mayrhauser.

Performance Evaluation: Even simple computer systems can require very
     large stochastic Petri nets when modeled. We are investigating
     possible simplification and decomposition strategies that
     simplify the models while preserving a high degree of accuracy.
     Investigator: Anneliese von Mayrhauser.

Domain-Based Testing: SLEUTH is a system that automatically generates
     scripts, command templates and commands for command driven
     software.  We are investigating its application reuse, regression
     testing and test management.  Investigator: Anneliese von
     Mayrhauser.

Genetic Algorithms: Genetic algorithms are a class of adaptive
     optimization procedures with applications in function
     optimization and machine learning. Several on-going research
     projects are investigating the fundamental principles by which
     these algorithms work with the goal of improving genetic
     algorithm implementations.  Also, the use of genetic algorithms
     for designing and optimizing neural networks is being
     investigated.  Investigator: Darrell Whitley.  Sponsor: National
     Science Foundation.

Applying Genetic Algorithms to Scheduling Problems: This research is
     aimed at building a sequencing optimization tool using genetic
     algorithms.  The work involves improving the performance of
     genetic algorithms on classic sequencing problems such as the
     Traveling Salesman as well as real world scheduling systems.
     Investigator: Darrell Whitley.

Applying Genetic Algorithms to Geophysical Applications: There are
     several problems in geophysics related to the interpretation of
     seismic data that involve the optimization of nonlinear functions
     which are known to be multimodal.  We are exploring the use of
     genetic algorithms for solving these problems.  We are testing
     new varieties of genetic algorithms that dynamically remap
     hyperspace during search.  Investigator: Darrell Whitley.
     Sponsor: Colorado Advanced Software Institute.  Collaborator:
     Advanced Geophysical.
     =========================================================================

						      Revised September 1994
----------------------------Cut Here for Page One--------------------------


			     Colorado State University
       		            Computer Science Department

                         Confidential Report on Applicant
		   	        to Graduate Program



Applicant's Name:_____________________________________________________________

*******************************************************************************

				 To the Applicant

This form should be given to people who are able to comment on your
qualifications for graduate study.  Recommendations should be from
persons in academic and/or professional fields.

Under the Family Educational Rights and Privacy Act of 1974 (the
Buckley Amendment), and the Colorado Open Records Law, students are
entitled to review their records, including letters of recommendation.
However, those writing recommendations and those assessing
recommendations may attach significance to them if it is known that
the letters will remain confidential.  It is your option to waive your
right to review these recommendations. Please mark the appropriate
choice below and sign your name.


          ___ I waive my right to review this recommendation, and
	  request a candid evaluation with all relevant information
	  provided.
          
          
          ___ I do not waive my right to review this recommendation,
	  but request a candid evaluation with all relevant
	  information provided.
          

Signature of Applicant____________________________________________Date________

******************************************************************************


			    To the Recommending Person
     

On the back side of this page please give a description of your
knowledge of the applicant, with emphasis on: demonstrated academic,
teaching, and research ability; English skills (written and oral);
ability to work independently and with others; imagination and
creativity; emotional maturity; and ambition.


-------------------------------Cut Here for Page Two--------------------------


 Characteristics:   Upper     Upper     Upper     Upper     Lower     No basis 
                      5%       10%       25%       50%       50%      to judge 
 -----------------------------------------------------------------------------
 Demonstrated    |        |          |         |         |         |         | 
 Academic Ability|        |          |         |         |         |         |
 -----------------------------------------------------------------------------
 Demonstrated    |        |          |         |         |         |         |
 Research Ability|        |          |         |         |         |         |
 -----------------------------------------------------------------------------
 Demonstrated    |        |          |         |         |         |         |
 Teaching Ability|        |          |         |         |         |         |
 -----------------------------------------------------------------------------
 Oral English    |        |          |         |         |         |         |
 Skills          |        |          |         |         |         |         |
 -----------------------------------------------------------------------------
 Written English |        |          |         |         |         |         |
 Skills          |        |          |         |         |         |         |
 -----------------------------------------------------------------------------
 Ability to Work |        |          |         |         |         |         | 
 with Others     |        |          |         |         |         |         |
 -----------------------------------------------------------------------------
 Ability to Work |        |          |         |         |         |         | 
 Independently   |        |          |         |         |         |         |
 -----------------------------------------------------------------------------
 Imagination and |        |          |         |         |         |         |
 Creativity      |        |          |         |         |         |         |
 -----------------------------------------------------------------------------
 Emotional       |         |         |         |         |         |         | 
 Maturity        |         |         |         |         |         |         | 
 -----------------------------------------------------------------------------
 Desire to Achieve/        |         |         |         |         |         |
 Ambition        |         |         |         |         |         |         |
 -----------------------------------------------------------------------------


Comments:














Name:  __________________________________________ Title:______________________

Institution:__________________________________________________________________
               
Signature:______________________________________________ Date:________________

		  Please mail this recommendation directly to:

		             Colorado State University
		            Computer Science Department
		              ATTN:  Graduate Program
		              Fort Collins, CO  80523
		                       U.S.A.

-------------------Cut Here for End of Form-----------------------------------

-- 
Colorado State University
Computer Science Department
ATTN:  Graduate Program
Fort Collins, CO  80523


		   Department Graduate Committee Chairman:  Dr. Darrell Whitley
					  Main Department Office:  303 491 5792
					          Department Fax:  303 491 2466
				  University Graduate Admissions:  303 491 3737
				      University Graduate School:  303 491 6817




